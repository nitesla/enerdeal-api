# This is a basic workflow to help you get started with Actions

name: enerdeal-api

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the develop branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
# A workflow run is made up of one or more jobs that can run sequentially or in parallel

env:
  IMAGE_TAG: ${{ github.sha }}
  AWS_ACCESS_ENERDEAL_KEY_ID: ${{ secrets.AWS_ACCESS_ENERDEAL_KEY_ID }}
  AWS_SECRET_ENERDEAL_ACCESS_KEY: ${{ secrets.AWS_SECRET_ENERDEAL_ACCESS_KEY }}
  AWS_REGISTRY: ${{ secrets.AWS_REPOSITORY_ENERDEAL_URL }}
  AWS_REGION: ${{ secrets.AWS_DEFAULT_ENERDEAL_REGION }}
  AWS_DEFAULT_OUTPUT: json
  REPO_NAME: enerdeal-api
  
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      # Runs a set of commands using the runners shell
      - name: Installing packages
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
      - name: Build Image
        run: |
          echo building project into container
          mvn clean
          mvn package
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_ENERDEAL_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ENERDEAL_ACCESS_KEY }}
          aws-region: eu-central-1
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
          
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: enerdeal-api
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo $ECR_REGISTRY
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
      - name: AWS Version
        run: aws --version
      - name: Define Task Defination
        run: |
          aws ecs register-task-definition --region eu-central-1 --family enerdeal-api--container-definitions  '[{"portMappings": [{"hostPort": 8080, "containerPort": 8080,"protocol": "tcp"}],"volumesFrom": [],"mountPoints": [],"image": "653532977316.dkr.ecr.eu-central-1.amazonaws.com/enerdeal-api:'$IMAGE_TAG'","name": "enerdeal-api","logConfiguration": {"options": {"awslogs-region": "eu-central-1","awslogs-stream-prefix": "ecs","awslogs-group": "/ecs/enerdeal-api", "awslogs-create-group": "true"},"logDriver": "awslogs"},"environment": [],"essential": true}]' --requires-compatibilities "FARGATE" --network-mode "awsvpc" --execution-role-arn arn:aws:iam::653532977316:role/ecsTaskExecutionRole --cpu 512 --memory 1024
     
      - name: Update ECS Service
        run: |
          aws ecs update-service --region eu-central-1 --cluster rensource-production --service enerdeal-api --desired-count 1 --task-definition enerdeal-api --health-check-grace-period-seconds 60
